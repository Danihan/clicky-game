{"version":3,"sources":["components/Card/Card.js","components/ScoreBar/ScoreBar.js","components/Game/Game.js","components/utils.js","App.js","serviceWorker.js","index.js"],"names":["Card","onClick","_this","props","index","_this$props","this","Object","objectWithoutProperties","react_default","a","createElement","assign","className","style","backgroundImage","concat","Component","ScoreBar","_ref","currentScore","topScore","Game","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onGuess","state","imagesClicked","indexOf","onIncorrectGuess","onCorrectGuess","selectAndShuffleImages","images","score","min","max","Set","size","cardsToShow","add","imagesCount","Math","ceil","floor","random","setState","Array","from","toConsumableArray","_this2","components_ScoreBar_ScoreBar","map","components_Card_Card","key","App","components_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ab1cfe1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Card.css';\n\nclass Card extends Component {\n  onClick = () => {\n    this.props.onClick(this.props.index)\n  }\n\n  render() {\n    const { index, ...props } = this.props\n\n    return <div {...props} className=\"Card\" onClick={this.onClick}><div className=\"CardInner\" style={{backgroundImage: `url(images/${index}.jpg)`}} /></div>\n  }\n}\n\nexport default Card;\n","import React from 'react';\nimport './ScoreBar.css';\n\nconst ScoreBar = ({ currentScore, topScore }) => (\n  <div className=\"ScoreBar\">\n    <div className=\"ScoreBar-Left\">\n    Score: {currentScore}\n    </div>\n\n    <div className=\"ScoreBar-Right\">\n    Top Score: {topScore}\n    </div>\n  </div>\n)\n\nexport default ScoreBar;","import React, { Component } from 'react';\nimport Card from '../Card/Card';\nimport { getRandomIntInclusive } from '../utils';\nimport './Game.css';\nimport ScoreBar from '../ScoreBar/ScoreBar';\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      images: [],\n      score: 0,\n      topScore: 0,\n\n      imagesClicked: []\n    }\n  }\n\n  componentWillMount() {\n    this.selectAndShuffleImages()\n  }\n\n  selectAndShuffleImages() {\n    const images = new Set()\n\n    while (images.size !== this.props.cardsToShow) {\n      images.add(getRandomIntInclusive(1, this.props.imagesCount))\n    }\n\n    this.setState({ images: Array.from(images) })\n  }\n\n  onCorrectGuess(index) {\n    this.setState({\n      score: this.state.score + 1,\n      imagesClicked: [ ...this.state.imagesClicked, index]\n    })\n  }\n\n  onIncorrectGuess(index) {\n    this.setState({\n      topScore: this.state.score > this.state.topScore ? this.state.score : this.state.topScore,\n      score: 0,\n      imagesClicked: []\n    })\n  }\n\n  onGuess = (index) => {\n    if (this.state.imagesClicked.indexOf(index) !== -1) {\n      this.onIncorrectGuess(index)\n    } else {\n      this.onCorrectGuess(index)\n    }\n\n    this.selectAndShuffleImages()\n  }\n\n  render() {\n    return (\n      <div className=\"Game\">\n        <div className=\"Container\">\n          <ScoreBar currentScore={this.state.score} topScore={this.state.topScore} />\n\n          <div className=\"CardGrid\">\n            {this.state.images.map(index => <Card key={index} index={index} onClick={this.onGuess} />)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","export function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","import React, { Component } from 'react';\nimport Game from './components/Game/Game';\nimport './App.css';\n\nconst IMAGES_COUNT = 15\nconst CARDS_TO_SHOW = 9\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Game imagesCount={IMAGES_COUNT} cardsToShow={CARDS_TO_SHOW} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}